from flask import Blueprint, render_template, request, jsonify
import data_manager
import time
import uuid

user_bp = Blueprint('user', __name__)
LINK_EXPIRY_SECONDS = 30 * 60  # 30 minutes

@user_bp.route('/')
def dashboard():
    courses = data_manager.get_courses()
    settings = data_manager.get_settings()
    return render_template('user.html', courses=courses, settings=settings)

@user_bp.route('/submit-payment', methods=['POST'])
def submit_payment():
    data = request.json
    user_id = data.get('userId')
    course_id = int(data.get('courseId'))

    if not user_id: return jsonify({'error': 'User ID missing'}), 400

    users = data_manager.get_users()
    if user_id not in users:
        users[user_id] = {'submissions': []}
    
    # Check if a submission for this course already exists
    if any(s['course_id'] == course_id for s in users[user_id]['submissions']):
        return jsonify({'status': 'info', 'message': 'You already have a submission for this course.'})

    new_submission = {
        "course_id": course_id,
        "user_name": data['userName'],
        "tx_id": data['txId'],
        "status": "pending",
        "submission_time": int(time.time())
    }
    users[user_id]['submissions'].append(new_submission)
    data_manager.save_users(users)
    return jsonify({'status': 'success', 'message': 'Submission received!'})

@user_bp.route('/get-status', methods=['POST'])
def get_status():
    user_id = request.json.get('userId')
    if not user_id: return jsonify({'error': 'User ID missing'}), 400

    users = data_manager.get_users()
    user_data = users.get(user_id, {})
    course_statuses = {}

    current_time = int(time.time())

    for sub in user_data.get('submissions', []):
        status = sub['status']
        if status == 'approved':
            unlock_time = sub.get('unlock_time', 0)
            if current_time - unlock_time > LINK_EXPIRY_SECONDS:
                status = 'expired' # The link is expired
        course_statuses[sub['course_id']] = status

    return jsonify(course_statuses)