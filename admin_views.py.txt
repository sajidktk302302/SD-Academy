from flask import Blueprint, render_template, request, redirect, url_for, flash
import data_manager
import time

admin_bp = Blueprint('admin', __name__)

@admin_bp.route('/admin')
def admin_panel():
    courses = data_manager.get_courses()
    users = data_manager.get_users()
    settings = data_manager.get_settings()
    
    pending_submissions = []
    for user_id, user_data in users.items():
        for sub in user_data.get('submissions', []):
            if sub['status'] == 'pending':
                # Course title find karein
                course_title = next((c['title'] for c in courses if c['id'] == sub['course_id']), "Unknown Course")
                pending_submissions.append({**sub, 'user_id': user_id, 'course_title': course_title})

    return render_template('admin.html', courses=courses, submissions=pending_submissions, settings=settings)

@admin_bp.route('/admin/add-course', methods=['POST'])
def add_course():
    courses = data_manager.get_courses()
    new_course = {
        "id": int(time.time()), # Simple unique ID
        "title": request.form['title'],
        "image_url": request.form['image_url'],
        "price": float(request.form['price']),
        "download_link": "https://example.com/path/to/your/secure/file.zip" # Yahan asli link daalein
    }
    courses.append(new_course)
    data_manager.save_courses(courses)
    flash("Course added successfully!", "success")
    return redirect(url_for('admin.admin_panel'))

@admin_bp.route('/admin/delete-course/<int:course_id>', methods=['POST'])
def delete_course(course_id):
    courses = data_manager.get_courses()
    courses = [c for c in courses if c['id'] != course_id]
    data_manager.save_courses(courses)
    flash("Course deleted.", "success")
    return redirect(url_for('admin.admin_panel'))

@admin_bp.route('/admin/update-submission', methods=['POST'])
def update_submission():
    user_id = request.form['user_id']
    course_id = int(request.form['course_id'])
    new_status = request.form['status'] # "approved" or "rejected"
    
    users = data_manager.get_users()
    if user_id in users:
        for sub in users[user_id]['submissions']:
            if sub['course_id'] == course_id:
                sub['status'] = new_status
                if new_status == 'approved':
                    # Set the unlock time when approved
                    sub['unlock_time'] = int(time.time())
                break
    data_manager.save_users(users)
    flash(f"Submission updated to {new_status}.", "success")
    return redirect(url_for('admin.admin_panel'))

@admin_bp.route('/admin/update-settings', methods=['POST'])
def update_settings():
    settings = {
        "wallet_address": request.form['wallet_address'],
        "qr_code_url": request.form['qr_code_url']
    }
    data_manager.save_settings(settings)
    flash("Settings updated.", "success")
    return redirect(url_for('admin.admin_panel'))